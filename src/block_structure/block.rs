use super::{
    block_header::BlockHeader, error_block::ErrorBlock, hash::HashType, merkle_tree::MerkleTree,
    transaction::Transaction,
};

use crate::serialization::{
    deserializable_internal_order::DeserializableInternalOrder,
    error_serialization::ErrorSerialization,
    serializable_internal_order::SerializableInternalOrder,
};

use std::{
    fmt::Display,
    io::{Read, Write},
};

/// It's the representation of a block in the block chain
#[derive(Debug, Clone, PartialEq)]
pub struct Block {
    pub header: BlockHeader,
    pub transactions: Vec<Transaction>,
}

impl Block {
    pub fn new(header: BlockHeader) -> Self {
        Block {
            header,
            transactions: vec![],
        }
    }

    /// Verifies that the merkle root hash is correct
    pub fn proof_of_inclusion(&self) -> bool {
        self.header.proof_of_inclusion(&self.transactions)
    }

    /// Appends the transaction to the block if it's not already in the block
    ///
    /// ### Error
    ///  * `ErrorBlock::TransactionAlreadyInBlock`: It will appear when the Transaction is already in the block
    pub fn append_transaction(&mut self, transaction: Transaction) -> Result<(), ErrorBlock> {
        match self
            .transactions
            .iter()
            .any(|this_transaction| *this_transaction == transaction)
        {
            true => return Err(ErrorBlock::TransactionAlreadyInBlock),
            false => self.transactions.push(transaction),
        }

        Ok(())
    }
    /* 
    /// Calculate the merkle path for a transaction in the block
    ///
    /// ### Error
    ///  * `ErrorBlock::CouldNotCalculateMerklePath`: It will appear when the merkle path could not be calculated
    pub fn get_merkle_path(&self, transaction: &Transaction) -> Result<Vec<HashType>, ErrorBlock> {
        let path: Vec<HashType> =
            match MerkleTree::get_merkle_path(&self.transactions, transaction.clone()) {
                Ok(path) => path,
                Err(_) => return Err(ErrorBlock::CouldNotCalculateMerklePath),
            };

        Ok(path)
    }
    */
}

impl Display for Block {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Block: todo!()")
    }
}

impl SerializableInternalOrder for Block {
    fn io_serialize(&self, stream: &mut dyn Write) -> Result<(), ErrorSerialization> {
        self.header.io_serialize(stream)?;

        for transaction in self.transactions.iter() {
            transaction.io_serialize(stream)?;
        }

        Ok(())
    }
}

impl DeserializableInternalOrder for Block {
    fn io_deserialize(stream: &mut dyn Read) -> Result<Self, ErrorSerialization> {
        let header = BlockHeader::io_deserialize(stream)?;
        let length = header.transaction_count.value;

        let mut transactions: Vec<Transaction> = Vec::new();
        for _ in 0..length {
            let transaction = Transaction::io_deserialize(stream)?;
            transactions.push(transaction);
        }

        Ok(Block {
            header,
            transactions,
        })
    }
}

#[cfg(test)]

mod tests {
    use super::*;

    use crate::block_structure::{
        block_version, compact256::Compact256, outpoint::Outpoint,
        transaction_input::TransactionInput, transaction_output::TransactionOutput,
    };

    use crate::messages::compact_size::CompactSize;

    #[test]
    fn test_01_correct_block_serialization() {
        let block_header = BlockHeader::new(
            block_version::BlockVersion::version(1),
            [0; 32],
            [0; 32],
            0,
            Compact256::from(10),
            0,
            CompactSize::new(2),
        );

        let transaction_input =
            TransactionInput::new(Outpoint::new([1; 32], 23), vec![1, 2, 3], 24);

        let transaction_output = TransactionOutput {
            value: 10,
            pk_script: vec![4, 5, 6],
        };

        let transaction_1 = Transaction {
            version: 1,
            tx_in: vec![transaction_input],
            tx_out: vec![transaction_output],
            time: 0,
        };

        let transaction_2 = transaction_1.clone();

        let transactions = vec![transaction_1, transaction_2];

        let block = Block {
            header: block_header.clone(),
            transactions: transactions.clone(),
        };

        let mut serialized_fields = Vec::new();
        block_header.io_serialize(&mut serialized_fields).unwrap();
        for transaction in transactions.iter() {
            transaction.io_serialize(&mut serialized_fields).unwrap();
        }

        let mut serialized_block = Vec::new();
        block.io_serialize(&mut serialized_block).unwrap();

        assert_eq!(serialized_fields, serialized_block);
    }

    #[test]
    fn test_02_correct_block_deserialization() {
        let block_header = BlockHeader::new(
            block_version::BlockVersion::version(1),
            [0; 32],
            [0; 32],
            0,
            Compact256::from(10),
            0,
            CompactSize::new(2),
        );

        let transaction_input =
            TransactionInput::new(Outpoint::new([1; 32], 23), vec![1, 2, 3], 24);

        let transaction_output = TransactionOutput {
            value: 10,
            pk_script: vec![4, 5, 6],
        };

        let transaction_1 = Transaction {
            version: 1,
            tx_in: vec![transaction_input],
            tx_out: vec![transaction_output],
            time: 0,
        };

        let transaction_2 = transaction_1.clone();

        let transactions = vec![transaction_1, transaction_2];

        let block = Block {
            header: block_header.clone(),
            transactions: transactions.clone(),
        };

        let mut serialized_block = Vec::new();
        block.io_serialize(&mut serialized_block).unwrap();

        let deserialized_block = Block::io_deserialize(&mut serialized_block.as_slice()).unwrap();

        assert_eq!(block, deserialized_block);
    }

    #[test]
    fn test_03_correct_append_transaction() {
        let block_header = BlockHeader::new(
            block_version::BlockVersion::version(1),
            [0; 32],
            [0; 32],
            0,
            Compact256::from(10),
            0,
            CompactSize::new(1),
        );

        let transaction_input =
            TransactionInput::new(Outpoint::new([1; 32], 23), vec![1, 2, 3], 24);

        let transaction_output = TransactionOutput {
            value: 10,
            pk_script: vec![4, 5, 6],
        };

        let transaction_1 = Transaction {
            version: 1,
            tx_in: vec![transaction_input],
            tx_out: vec![transaction_output],
            time: 0,
        };

        let transaction_input =
            TransactionInput::new(Outpoint::new([2; 32], 26), vec![1, 2, 3], 24);

        let transaction_output = TransactionOutput {
            value: 10,
            pk_script: vec![4, 5, 6],
        };

        let transaction_2 = Transaction {
            version: 1,
            tx_in: vec![transaction_input],
            tx_out: vec![transaction_output],
            time: 0,
        };

        let transactions = vec![transaction_1];

        let mut block = Block {
            header: block_header.clone(),
            transactions: transactions.clone(),
        };

        assert!(block.transactions.len() == 1);
        block.append_transaction(transaction_2).unwrap();
        assert!(block.transactions.len() == 2);
    }

    #[test]
    fn test_04_cannot_append_a_transaction_already_in_block() {
        let block_header = BlockHeader::new(
            block_version::BlockVersion::version(1),
            [0; 32],
            [0; 32],
            0,
            Compact256::from(10),
            0,
            CompactSize::new(1),
        );

        let transaction_input =
            TransactionInput::new(Outpoint::new([1; 32], 23), vec![1, 2, 3], 24);

        let transaction_output = TransactionOutput {
            value: 10,
            pk_script: vec![4, 5, 6],
        };

        let transaction_1 = Transaction {
            version: 1,
            tx_in: vec![transaction_input],
            tx_out: vec![transaction_output],
            time: 0,
        };

        let transaction_2 = transaction_1.clone();

        let transactions = vec![transaction_1];

        let mut block = Block {
            header: block_header.clone(),
            transactions: transactions.clone(),
        };

        assert!(block.transactions.len() == 1);
        assert!(block.append_transaction(transaction_2).is_err());
    }

    #[test]
    fn test_05_correct_merkle_tree() {
        let block_bytes: Vec<u8> = vec![
            0, 224, 232, 47, 107, 170, 61, 88, 15, 224, 53, 243, 248, 70, 222, 159, 170, 37, 19, 139, 52, 137, 217, 223, 136, 
            230, 96, 252, 1, 0, 0, 0, 0, 0, 0, 0, 233, 127, 254, 187, 26, 166, 173, 70, 163, 4, 160, 39, 182, 201, 88, 183, 
            251, 56, 241, 55, 235, 182, 100, 2, 102, 150, 235, 68, 160, 252, 24, 82, 201, 138, 39, 100, 141, 238, 41, 25, 
            162, 20, 57, 185, 9, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 30, 3, 229, 7, 37, 25, 68, 77, 71, 66, 108, 111, 99, 107, 99, 104, 97, 
            105, 110, 77, 14, 139, 49, 18, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 2, 255, 135, 37, 0, 0, 0, 0, 0, 22, 0, 
            20, 137, 91, 252, 180, 253, 159, 179, 62, 25, 123, 144, 63, 16, 219, 211, 33, 236, 38, 64, 215, 0, 0, 0, 0, 0, 
            0, 0, 0, 38, 106, 36, 170, 33, 169, 237, 0, 144, 56, 112, 21, 0, 99, 126, 14, 255, 10, 89, 25, 232, 175, 21, 
            228, 70, 73, 187, 129, 79, 195, 102, 196, 191, 57, 208, 230, 205, 181, 148, 0, 0, 0, 0, 1, 0, 0, 0, 8, 126, 126,
            180, 126, 92, 36, 137, 69, 51, 33, 174, 86, 234, 54, 225, 70, 217, 58, 118, 136, 225, 158, 96, 22, 118, 194, 133,
            29, 96, 253, 5, 157, 1, 0, 0, 0, 0, 255, 255, 255, 255, 157, 35, 103, 230, 211, 242, 36, 181, 222, 245, 199, 145, 216, 190, 151, 220, 87, 101, 198, 255, 91, 171, 44, 52, 63, 72, 102, 120, 218, 105, 7, 67, 4, 0, 0, 0, 0, 255, 255, 255, 255, 193, 83, 115, 41, 181, 157, 202, 213, 103, 50, 186, 47, 194, 147, 64, 33, 181, 65, 138, 142, 45, 130, 209, 12, 25, 251, 70, 151, 27, 205, 208, 171, 3, 0, 0, 0, 0, 255, 255, 255, 255, 30, 190, 124, 199, 77, 30, 30, 20, 226, 188, 213, 24, 68, 233, 233, 84, 76, 163, 233, 134, 28, 216, 84, 119, 59, 168, 85, 62, 149, 197, 101, 176, 1, 0, 0, 0, 0, 255, 255, 255, 255, 224, 75, 71, 199, 47, 225, 209, 113, 114, 225, 110, 71, 26, 130, 56, 236, 47, 1, 26, 86, 85, 232, 112, 250, 101, 41, 16, 18, 254, 4, 230, 190, 0, 0, 0, 0, 0, 255, 255, 255, 255, 186, 140, 125, 95, 137, 231, 76, 135, 64, 108, 183, 91, 232, 205, 162, 236, 205, 113, 195, 16, 58, 227, 53, 217, 114, 166, 80, 135, 168, 64, 178, 72, 0, 0, 0, 0, 0, 255, 255, 255, 255, 150, 26, 175, 67, 6, 182, 141, 121, 120, 154, 185, 6, 103, 99, 64, 14, 101, 108, 81, 209, 139, 77, 206, 95, 241, 187, 23, 138, 246, 192, 221, 214, 10, 0, 0, 0, 0, 255, 255, 255, 255, 11, 181, 73, 216, 51, 93, 181, 238, 201, 59, 66, 117, 89, 142, 244, 155, 114, 182, 33, 222, 114, 234, 66, 47, 44, 97, 44, 198, 5, 58, 66, 207, 2, 0, 0, 0, 0, 255, 255, 255, 255, 3, 132, 5, 97, 0, 0, 0, 0, 0, 22, 0, 20, 63, 15, 216, 75, 131, 165, 174, 133, 134, 18, 121, 201, 255, 222, 168, 33, 192, 215, 65, 20, 128, 132, 30, 0, 0, 0, 0, 0, 34, 81, 32, 130, 47, 36, 129, 11, 104, 31, 27, 103, 56, 175, 123, 5, 42, 228, 230, 0, 87, 119, 72, 219, 176, 170, 55, 81, 179, 22, 175, 20, 2, 103, 105, 128, 132, 30, 0, 0, 0, 0, 0, 34, 81, 32, 148, 205, 135, 52, 216, 226, 206, 223, 163, 29, 16, 146, 102, 104, 109, 209, 105, 165, 43, 222, 213, 75, 125, 212, 169, 26, 101, 220, 99, 151, 39, 189, 0, 0, 0, 0, 1, 0, 0, 0, 11, 126, 126, 180, 126, 92, 36, 137, 69, 51, 33, 174, 86, 234, 54, 225, 70, 217, 58, 118, 136, 225, 158, 96, 22, 118, 194, 133, 29, 96, 253, 5, 157, 4, 0, 0, 0, 0, 255, 255, 255, 255, 157, 35, 103, 230, 211, 242, 36, 181, 222, 245, 199, 145, 216, 190, 151, 220, 87, 101, 198, 255, 91, 171, 44, 52, 63, 72, 102, 120, 218, 105, 7, 67, 3, 0, 0, 0, 0, 255, 255, 255, 255, 13, 80, 228, 205, 143, 136, 22, 118, 233, 121, 48, 119, 164, 204, 11, 48, 109, 187, 65, 223, 70, 211, 194, 98, 118, 33, 216, 191, 10, 208, 204, 94, 4, 0, 0, 0, 0, 255, 255, 255, 255, 150, 26, 175, 67, 6, 182, 141, 121, 120, 154, 185, 6, 103, 99, 64, 14, 101, 108, 81, 209, 139, 77, 206, 95, 241, 187, 23, 138, 246, 192, 221, 214, 5, 0, 0, 0, 0, 255, 255, 255, 255, 160, 118, 80, 36, 247, 208, 74, 28, 54, 216, 84, 26, 127, 246, 63, 191, 225, 248, 157, 255, 167, 17, 52, 81, 169, 75, 202, 229, 33, 11, 110, 238, 0, 0, 0, 0, 0, 255, 255, 255, 255, 193, 83, 115, 41, 181, 157, 202, 213, 103, 50, 186, 47, 194, 147, 64, 33, 181, 65, 138, 142, 45, 130, 209, 12, 25, 251, 70, 151, 27, 205, 208, 171, 2, 0, 0, 0, 0, 255, 255, 255, 255, 30, 190, 124, 199, 77, 30, 30, 20, 226, 188, 213, 24, 68, 233, 233, 84, 76, 163, 233, 134, 28, 216, 84, 119, 59, 168, 85, 62, 149, 197, 101, 176, 0, 0, 0, 0, 0, 255, 255, 255, 255, 227, 245, 5, 249, 223, 167, 60, 203, 105, 11, 4, 119, 108, 185, 69, 220, 117, 125, 237, 127, 30, 74, 47, 100, 213, 169, 83, 9, 11, 109, 115, 149, 1, 0, 0, 0, 0, 255, 255, 255, 255, 108, 67, 14, 79, 22, 34, 27, 105, 26, 169, 154, 206, 84, 48, 158, 66, 63, 7, 109, 142, 161, 162, 76, 57, 203, 255, 235, 102, 211, 9, 83, 38, 3, 0, 0, 0, 0, 255, 255, 255, 255, 11, 181, 73, 216, 51, 93, 181, 238, 201, 59, 66, 117, 89, 142, 244, 155, 114, 182, 33, 222, 114, 234, 66, 47, 44, 97, 44, 198, 5, 58, 66, 207, 4, 0, 0, 0, 0, 255, 255, 255, 255, 59, 194, 89, 126, 157, 71, 104, 77, 113, 235, 224, 88, 124, 210, 63, 18, 90, 48, 143, 94, 116, 226, 218, 26, 110, 221, 159, 105, 203, 180, 184, 41, 5, 0, 0, 0, 0, 255, 255, 255, 255, 8, 141, 144, 111, 0, 0, 0, 0, 0, 22, 0, 20, 31, 38, 183, 97, 61, 14, 210, 152, 7, 186, 246, 238, 87, 83, 193, 215, 233, 230, 157, 171, 128, 132, 30, 0, 0, 0, 0, 0, 34, 81, 32, 8, 134, 82, 98, 107, 252, 5, 3, 23, 51, 145, 175, 111, 129, 12, 12, 166, 128, 104, 194, 132, 6, 177, 44, 66, 13, 245, 142, 116, 34, 124, 254, 128, 132, 30, 0, 0, 0, 0, 0, 34, 81, 32, 70, 57, 72, 163, 203, 1, 121, 147, 225, 192, 109, 86, 159, 103, 61, 177, 30, 72, 120, 236, 154, 252, 114, 49, 83, 120, 185, 200, 122, 6, 148, 187, 128, 132, 30, 0, 0, 0, 0, 0, 34, 81, 32, 87, 157, 187, 155, 148, 181, 202, 233, 35, 82, 91, 217, 100, 89, 105, 173, 211, 224, 39, 115, 146, 151, 247, 79, 245, 233, 16, 165, 193, 245, 51, 171, 128, 132, 30, 0, 0, 0, 0, 0, 34, 81, 32, 105, 136, 28, 32, 203, 133, 101, 213, 11, 203, 118, 124, 224, 184, 198, 215, 128, 177, 153, 205, 157, 124, 94, 251, 119, 98, 23, 245, 145, 252, 132, 95, 198, 153, 0, 0, 0, 0, 0, 0, 34, 81, 32, 192, 232, 169, 206, 5, 12, 58, 20, 135, 108, 9, 89, 207, 25, 234, 63, 144, 150, 6, 102, 163, 240, 6, 153, 79, 125, 212, 49, 52, 113, 178, 142, 136, 19, 0, 0, 0, 0, 0, 0, 22, 0, 20, 23, 255, 52, 221, 102, 48, 90, 212, 66, 34, 243, 10, 119, 205, 131, 239, 198, 163, 174, 80, 136, 19, 0, 0, 0, 0, 0, 0, 22, 0, 20, 216, 48, 112, 221, 209, 156, 233, 80, 135, 216, 84, 66, 186, 185, 126, 51, 138, 210, 45, 84, 0, 0, 0, 0, 1, 0, 0, 0, 11, 71, 102, 172, 241, 126, 222, 196, 130, 223, 161, 74, 246, 100, 220, 168, 52, 13, 223, 121, 156, 38, 137, 187, 159, 221, 100, 167, 21, 237, 224, 72, 139, 1, 0, 0, 0, 0, 255, 255, 255, 255, 157, 35, 103, 230, 211, 242, 36, 181, 222, 245, 199, 145, 216, 190, 151, 220, 87, 101, 198, 255, 91, 171, 44, 52, 63, 72, 102, 120, 218, 105, 7, 67, 2, 0, 0, 0, 0, 255, 255, 255, 255, 13, 80, 228, 205, 143, 136, 22, 118, 233, 121, 48, 119, 164, 204, 11, 48, 109, 187, 65, 223, 70, 211, 194, 98, 118, 33, 216, 191, 10, 208, 204, 94, 3, 0, 0, 0, 0, 255, 255, 255, 255, 169, 87, 5, 22, 24, 250, 95, 174, 151, 171, 207, 7, 225, 38, 198, 220, 213, 228, 174, 13, 14, 212, 143, 121, 79, 59, 183, 185, 82, 66, 89, 231, 3, 0, 0, 0, 0, 255, 255, 255, 255, 193, 83, 115, 41, 181, 157, 202, 213, 103, 50, 186, 47, 194, 147, 64, 33, 181, 65, 138, 142, 45, 130, 209, 12, 25, 251, 70, 151, 27, 205, 208, 171, 5, 0, 0, 0, 0, 255, 255, 255, 255, 59, 194, 89, 126, 157, 71, 104, 77, 113, 235, 224, 88, 124, 210, 63, 18, 90, 48, 143, 94, 116, 226, 218, 26, 110, 221, 159, 105, 203, 180, 184, 41, 3, 0, 0, 0, 0, 255, 255, 255, 255, 150, 26, 175, 67, 6, 182, 141, 121, 120, 154, 185, 6, 103, 99, 64, 14, 101, 108, 81, 209, 139, 77, 206, 95, 241, 187, 23, 138, 246, 192, 221, 214, 8, 0, 0, 0, 0, 255, 255, 255, 255, 160, 118, 80, 36, 247, 208, 74, 28, 54, 216, 84, 26, 127, 246, 63, 191, 225, 248, 157, 255, 167, 17, 52, 81, 169, 75, 202, 229, 33, 11, 110, 238, 10, 0, 0, 0, 0, 255, 255, 255, 255, 11, 181, 73, 216, 51, 93, 181, 238, 201, 59, 66, 117, 89, 142, 244, 155, 114, 182, 33, 222, 114, 234, 66, 47, 44, 97, 44, 198, 5, 58, 66, 207, 1, 0, 0, 0, 0, 255, 255, 255, 255, 42, 200, 179, 245, 20, 34, 187, 155, 157, 177, 12, 175, 80, 26, 24, 81, 78, 36, 232, 157, 76, 118, 9, 40, 94, 171, 123, 237, 156, 162, 71, 67, 5, 0, 0, 0, 0, 255, 255, 255, 255, 110, 125, 243, 207, 174, 250, 45, 184, 238, 130, 237, 84, 148, 223, 119, 215, 27, 161, 25, 85, 48, 252, 53, 2, 109, 95, 110, 156, 38, 169, 3, 144, 3, 0, 0, 0, 0, 255, 255, 255, 255, 6, 138, 160, 40, 0, 0, 0, 0, 0, 22, 0, 20, 21, 193, 136, 209, 65, 228, 10, 50, 228, 151, 140, 255, 41, 59, 149, 12, 225, 2, 176, 238, 128, 132, 30, 0, 0, 0, 0, 0, 22, 0, 20, 124, 100, 154, 54, 10, 20, 31, 82, 38, 228, 242, 33, 107, 180, 167, 214, 146, 42, 232, 77, 128, 132, 30, 0, 0, 0, 0, 0, 22, 0, 20, 185, 184, 37, 166, 147, 40, 231, 146, 183, 91, 71, 132, 80, 167, 235, 140, 184, 155, 195, 176, 128, 132, 30, 0, 0, 0, 0, 0, 22, 0, 20, 191, 64, 183, 71, 174, 61, 203, 87, 15, 30, 199, 174, 124, 184, 66, 97, 25, 222, 117, 216, 128, 132, 30, 0, 0, 0, 0, 0, 22, 0, 20, 204, 248, 146, 142, 68, 100, 162, 224, 150, 154, 43, 44, 110, 12, 191, 84, 7, 48, 3, 151, 136, 19, 0, 0, 0, 0, 0, 0, 34, 81, 32, 152, 21, 126, 156, 135, 218, 223, 201, 181, 200, 159, 59, 200, 93, 82, 249, 155, 24, 177, 108, 206, 66, 219, 136, 134, 16, 56, 38, 251, 145, 11, 218, 0, 0, 0, 0, 1, 0, 0, 0, 6, 157, 35, 103, 230, 211, 242, 36, 181, 222, 245, 199, 145, 216, 190, 151, 220, 87, 101, 198, 255, 91, 171, 44, 52, 63, 72, 102, 120, 218, 105, 7, 67, 0, 0, 0, 0, 0, 255, 255, 255, 255, 13, 80, 228, 205, 143, 136, 22, 118, 233, 121, 48, 119, 164, 204, 11, 48, 109, 187, 65, 223, 70, 211, 194, 98, 118, 33, 216, 191, 10, 208, 204, 94, 5, 0, 0, 0, 0, 255, 255, 255, 255, 30, 190, 124, 199, 77, 30, 30, 20, 226, 188, 213, 24, 68, 233, 233, 84, 76, 163, 233, 134, 28, 216, 84, 119, 59, 168, 85, 62, 149, 197, 101, 176, 2, 0, 0, 0, 0, 255, 255, 255, 255, 186, 140, 125, 95, 137, 231, 76, 135, 64, 108, 183, 91, 232, 205, 162, 236, 205, 113, 195, 16, 58, 227, 53, 217, 114, 166, 80, 135, 168, 64, 178, 72, 1, 0, 0, 0, 0, 255, 255, 255, 255, 150, 26, 175, 67, 6, 182, 141, 121, 120, 154, 185, 6, 103, 99, 64, 14, 101, 108, 81, 209, 139, 77, 206, 95, 241, 187, 23, 138, 246, 192, 221, 214, 9, 0, 0, 0, 0, 255, 255, 255, 255, 70, 204, 150, 192, 97, 122, 106, 181, 157, 165, 209, 69, 93, 249, 186, 114, 140, 10, 222, 230, 55, 181, 148, 108, 103, 212, 214, 247, 106, 160, 145, 73, 5, 0, 0, 0, 0, 255, 255, 255, 255, 7, 231, 132, 109, 0, 0, 0, 0, 0, 22, 0, 20, 47, 175, 169, 199, 0, 84, 49, 17, 40, 94, 109, 165, 190, 191, 163, 117, 45, 71, 8, 95, 211, 83, 24, 0, 0, 0, 0, 0, 34, 81, 32, 249, 224, 74, 91, 99, 44, 196, 113, 184, 94, 158, 115, 56, 71, 194, 234, 14, 10, 238, 57, 22, 157, 114, 146, 144, 23, 84, 254, 28, 49, 235, 165, 211, 83, 24, 0, 0, 0, 0, 0, 34, 81, 32, 252, 197, 251, 185, 113, 96, 107, 84, 105, 116, 242, 60, 185, 115, 1, 182, 220, 101, 37, 166, 172, 23, 232, 27, 213, 203, 54, 104, 15, 208, 234, 160, 180, 67, 0, 0, 0, 0, 0, 0, 22, 0, 20, 37, 126, 27, 137, 254, 149, 139, 30, 208, 83, 120, 1, 141, 193, 16, 179, 254, 135, 103, 13, 136, 19, 0, 0, 0, 0, 0, 0, 34, 81, 32, 53, 67, 31, 131, 114, 160, 195, 251, 17, 27, 164, 38, 134, 19, 202, 31, 44, 179, 235, 200, 129, 212, 227, 127, 112, 137, 159, 218, 6, 55, 155, 149, 136, 19, 0, 0, 0, 0, 0, 0, 34, 81, 32, 61, 155, 196, 237, 186, 15, 245, 112, 49, 42, 45, 142, 27, 149, 192, 101, 64, 171, 185, 46, 1, 107, 230, 101, 17, 155, 248, 182, 37, 147, 253, 131, 136, 19, 0, 0, 0, 0, 0, 0, 34, 81, 32, 68, 224, 52, 232, 233, 18, 250, 66, 120, 237, 229, 52, 87, 168, 24, 99, 98, 89, 117, 95, 110, 115, 116, 123, 48, 120, 233, 201, 72, 193, 57, 121, 0, 0, 0, 0, 1, 0, 0, 0, 3, 169, 87, 5, 22, 24, 250, 95, 174, 151, 171, 207, 7, 225, 38, 198, 220, 213, 228, 174, 13, 14, 212, 143, 121, 79, 59, 183, 185, 82, 66, 89, 231, 2, 0, 0, 0, 0, 255, 255, 255, 255, 243, 94, 210, 238, 210, 183, 141, 207, 167, 202, 197, 118, 133, 250, 85, 236, 172, 209, 33, 144, 199, 213, 86, 205, 177, 205, 10, 183, 200, 115, 99, 49, 4, 0, 0, 0, 0, 255, 255, 255, 255, 59, 194, 89, 126, 157, 71, 104, 77, 113, 235, 224, 88, 124, 210, 63, 18, 90, 48, 143, 94, 116, 226, 218, 26, 110, 221, 159, 105, 203, 180, 184, 41, 11, 0, 0, 0, 0, 255, 255, 255, 255, 10, 61, 120, 28, 0, 0, 0, 0, 0, 22, 0, 20, 137, 156, 21, 3, 56, 187, 27, 90, 14, 117, 76, 64, 148, 34, 18, 80, 2, 183, 170, 72, 32, 78, 0, 0, 0, 0, 0, 0, 22, 0, 20, 18, 36, 170, 175, 239, 91, 165, 219, 94, 141, 126, 59, 47, 211, 150, 9, 83, 116, 221, 222, 32, 78, 0, 0, 0, 0, 0, 0, 22, 0, 20, 34, 92, 23, 176, 39, 250, 89, 38, 71, 153, 181, 135, 148, 190, 120, 87, 46, 23, 229, 59, 32, 78, 0, 0, 0, 0, 0, 0, 22, 0, 20, 39, 2, 174, 253, 93, 131, 113, 251, 158, 166, 12, 20, 60, 84, 81, 164, 10, 4, 14, 216, 32, 78, 0, 0, 0, 0, 0, 0, 22, 0, 20, 112, 18, 159, 25, 245, 190, 63, 42, 213, 254, 45, 50, 133, 5, 79, 242, 183, 11, 21, 22, 32, 78, 0, 0, 0, 0, 0, 0, 22, 0, 20, 136, 5, 39, 11, 20, 141, 220, 248, 31, 54, 125, 117, 190, 176, 17, 158, 75, 155, 242, 61, 32, 78, 0, 0, 0, 0, 0, 0, 22, 0, 20, 159, 146, 84, 213, 182, 185, 169, 160, 9, 104, 58, 164, 52, 197, 74, 94, 245, 238, 100, 221, 32, 78, 0, 0, 0, 0, 0, 0, 22, 0, 20, 236, 10, 117, 251, 142, 222, 152, 253, 144, 177, 76, 123, 249, 24, 44, 134, 212, 235, 91, 106, 32, 78, 0, 0, 0, 0, 0, 0, 22, 0, 20, 236, 45, 88, 200, 210, 126, 22, 30, 140, 247, 31, 83, 49, 219, 140, 23, 158, 79, 38, 195, 240, 48, 0, 0, 0, 0, 0, 0, 22, 0, 20, 228, 127, 78, 61, 187, 30, 254, 230, 77, 135, 230, 250, 41, 153, 155, 37, 45, 198, 130, 82, 0, 0, 0, 0, 2, 0, 0, 0, 2, 105, 108, 239, 216, 4, 69, 25, 43, 174, 193, 75, 153, 32, 88, 42, 226, 92, 62, 211, 166, 147, 87, 97, 82, 196, 2, 237, 9, 96, 251, 229, 100, 5, 0, 0, 0, 0, 1, 0, 0, 0, 225, 178, 191, 134, 140, 253, 152, 219, 150, 72, 158, 91, 220, 136, 159, 1, 209, 68, 131, 108, 187, 228, 159, 60, 82, 15, 32, 43, 240, 21, 60, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 209, 119, 1, 0, 0, 0, 0, 0, 34, 0, 32, 194, 240, 215, 210, 201, 170, 62, 2, 120, 49, 198, 169, 6, 105, 135, 160, 93, 67, 253, 235, 71, 5, 230, 155, 100, 247, 210, 147, 15, 77, 34, 197, 29, 204, 2, 0, 0, 0, 0, 0, 34, 81, 32, 212, 42, 34, 60, 48, 253, 14, 47, 160, 111, 144, 209, 222, 242, 24, 215, 230, 9, 67, 4, 14, 56, 83, 190, 56, 32, 35, 77, 93, 213, 248, 135, 226, 7, 37, 0, 2, 0, 0, 0, 1, 254, 50, 189, 59, 166, 234, 6, 37, 190, 76, 212, 218, 251, 238, 126, 88, 210, 64, 19, 237, 61, 230, 165, 82, 141, 153, 219, 129, 14, 186, 166, 128, 1, 0, 0, 0, 0, 254, 255, 255, 255, 2, 228, 207, 27, 0, 0, 0, 0, 0, 22, 0, 20, 15, 134, 28, 251, 202, 63, 26, 162, 46, 255, 77, 250, 205, 131, 44, 171, 223, 108, 0, 158, 160, 122, 3, 0, 0, 0, 0, 0, 22, 0, 20, 93, 87, 106, 129, 244, 96, 231, 161, 237, 37, 79, 233, 191, 255, 7, 90, 179, 188, 69, 101, 227, 7, 37, 0, 2, 0, 0, 0, 1, 92, 27, 128, 120, 1, 200, 105, 89, 44, 19, 74, 174, 27, 212, 212, 186, 233, 195, 94, 212, 219, 103, 225, 123, 151, 191, 139, 250, 252, 70, 53, 233, 1, 0, 0, 0, 0, 254, 255, 255, 255, 2, 200, 44, 1, 0, 0, 0, 0, 0, 22, 0, 20, 93, 87, 106, 129, 244, 96, 231, 161, 237, 37, 79, 233, 191, 255, 7, 90, 179, 188, 69, 101, 102, 228, 28, 0, 0, 0, 0, 0, 22, 0, 20, 159, 128, 142, 205, 2, 37, 228, 192, 222, 3, 243, 202, 250, 2, 136, 189, 210, 238, 140, 125, 227, 7, 37, 0];
        let mut block_bytes: &[u8] = &block_bytes;
        let block = Block::io_deserialize(&mut block_bytes).unwrap();
        assert!(block.proof_of_inclusion());
    }

    #[test]
    fn test_06_incorrect_merkle_hash() {
        let block_bytes: Vec<u8> = vec![
            0, 0, 192, 32, 81, 215, 243, 102, 124, 88, 163, 15, 88, 120, 149, 153, 242, 135, 129, 201, 182, 74, 190, 173, 27, 145, 83, 115, 27, 0, 0, 0, 0, 0, 0, 0, 61, 86, 206, 43, 166, 197, 42, 49, 34, 167, 186, 199, 255, 175, 53, 0, 85, 67, 86, 197, 92, 35, 149, 128, 232, 27, 153, 147, 40, 75, 105, 0, 9, 139, 39, 100, 141, 238, 41, 25, 124, 24, 48, 250, 11, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 33, 3, 230, 7, 37, 4, 9, 139, 39, 100, 12, 8, 0, 3, 156, 160, 103, 0, 0, 0, 0, 0, 0, 10, 47, 112, 101, 103, 97, 112, 111, 111, 108, 47, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 38, 106, 36, 170, 33, 169, 237, 199, 35, 221, 200, 231, 59, 123, 41, 169, 39, 117, 68, 249, 218, 115, 221, 122, 135, 214, 250, 50, 60, 163, 242, 49, 43, 132, 196, 159, 4, 144, 138, 48, 99, 37, 0, 0, 0, 0, 0, 23, 169, 20, 226, 90, 126, 8, 230, 224, 114, 144, 14, 186, 14, 74, 147, 48, 105, 132, 109, 215, 231, 123, 135, 0, 0, 0, 0, 2, 0, 0, 0, 1, 126, 19, 206, 32, 64, 193, 124, 185, 3, 189, 75, 30, 31, 184, 36, 16, 139, 185, 227, 157, 251, 97, 135, 246, 64, 92, 121, 185, 160, 157, 0, 26, 1, 0, 0, 0, 106, 71, 48, 68, 2, 32, 92, 94, 207, 232, 136, 190, 144, 202, 75, 214, 69, 166, 91, 91, 216, 188, 54, 99, 194, 176, 196, 220, 46, 189, 177, 215, 197, 173, 167, 131, 161, 192, 2, 32, 45, 141, 74, 149, 28, 124, 62, 115, 23, 201, 124, 78, 145, 16, 24, 149, 21, 125, 252, 1, 62, 103, 87, 86, 242, 224, 87, 58, 195, 65, 118, 134, 1, 33, 2, 147, 231, 53, 215, 39, 227, 242, 181, 143, 147, 108, 118, 137, 7, 57, 253, 187, 84, 16, 203, 180, 182, 68, 33, 147, 105, 145, 232, 240, 181, 167, 206, 255, 255, 255, 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 54, 106, 52, 105, 111, 110, 58, 49, 46, 81, 109, 89, 52, 109, 116, 80, 51, 65, 119, 67, 52, 100, 87, 107, 57, 65, 83, 78, 106, 84, 51, 67, 69, 56, 69, 117, 80, 56, 82, 89, 74, 110, 76, 118, 111, 72, 85, 65, 110, 71, 103, 50, 51, 110, 69, 241, 223, 173, 8, 0, 0, 0, 0, 25, 118, 169, 20, 102, 234, 133, 187, 16, 134, 211, 200, 30, 82, 162, 57, 143, 0, 226, 116, 106, 198, 5, 171, 136, 172, 0, 0, 0, 0, 1, 0, 0, 0, 1, 215, 160, 192, 36, 158, 183, 173, 46, 182, 14, 71, 230, 203, 8, 130, 76, 212, 17, 112, 121, 235, 64, 95, 207, 73, 112, 252, 116, 29, 188, 89, 17, 3, 0, 0, 0, 107, 72, 48, 69, 2, 33, 0, 250, 73, 97, 57, 174, 238, 229, 220, 74, 210, 24, 141, 62, 199, 245, 240, 199, 145, 56, 47, 180, 200, 131, 160, 218, 224, 255, 254, 159, 121, 195, 160, 2, 32, 19, 9, 246, 242, 224, 7, 234, 185, 136, 213, 1, 164, 142, 57, 139, 41, 240, 198, 216, 225, 92, 144, 249, 160, 22, 10, 125, 243, 166, 149, 159, 167, 1, 33, 2, 116, 122, 46, 182, 33, 219, 139, 114, 246, 175, 11, 79, 106, 45, 126, 84, 105, 189, 116, 241, 117, 237, 221, 251, 109, 138, 109, 92, 108, 165, 118, 214, 253, 255, 255, 255, 4, 0, 0, 0, 0, 0, 0, 0, 0, 83, 106, 76, 80, 84, 50, 91, 17, 143, 178, 42, 172, 205, 193, 49, 255, 252, 70, 249, 103, 60, 168, 146, 226, 238, 13, 103, 236, 152, 202, 63, 214, 145, 238, 45, 37, 175, 38, 53, 58, 54, 19, 150, 183, 183, 130, 220, 41, 223, 4, 107, 102, 25, 173, 255, 20, 107, 72, 230, 248, 189, 179, 51, 103, 201, 211, 80, 19, 203, 99, 65, 0, 37, 7, 228, 0, 13, 0, 36, 254, 77, 0, 29, 51, 136, 19, 0, 0, 0, 0, 0, 0, 25, 118, 169, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 172, 136, 19, 0, 0, 0, 0, 0, 0, 25, 118, 169, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 172, 201, 228, 156, 9, 0, 0, 0, 0, 25, 118, 169, 20, 139, 139, 162, 224, 107, 210, 202, 219, 218, 248, 230, 234, 6, 195, 97, 199, 250, 52, 28, 55, 136, 172, 0, 0, 0, 0, 2, 0, 0, 0, 1, 177, 45, 214, 91, 41, 139, 126, 166, 12, 211, 28, 215, 243, 94, 126, 220, 153, 71, 145, 148, 33, 40, 15, 92, 132, 157, 187, 144, 230, 235, 159, 238, 1, 0, 0, 0, 23, 22, 0, 20, 176, 215, 241, 253, 199, 44, 226, 102, 197, 8, 161, 53, 63, 186, 34, 215, 166, 95, 177, 192, 255, 255, 255, 255, 2, 114, 166, 2, 0, 0, 0, 0, 0, 23, 169, 20, 43, 183, 178, 245, 223, 15, 115, 14, 238, 126, 192, 161, 173, 45, 203, 228, 12, 172, 215, 116, 135, 37, 162, 1, 0, 0, 0, 0, 0, 23, 169, 20, 117, 9, 184, 55, 205, 241, 101, 92, 19, 234, 99, 164, 92, 137, 146, 238, 4, 18, 122, 76, 135, 0, 0, 0, 0, 2, 0, 0, 0, 4, 98, 64, 55, 153, 83, 87, 165, 206, 199, 17, 127, 172, 180, 239, 157, 255, 61, 197, 199, 9, 236, 9, 152, 10, 112, 78, 77, 37, 67, 106, 200, 78, 0, 0, 0, 0, 0, 144, 0, 0, 0, 98, 64, 55, 153, 83, 87, 165, 206, 199, 17, 127, 172, 180, 239, 157, 255, 61, 197, 199, 9, 236, 9, 152, 10, 112, 78, 77, 37, 67, 106, 200, 78, 1, 0, 0, 0, 0, 144, 0, 0, 0, 21, 33, 231, 153, 32, 39, 41, 156, 224, 144, 75, 15, 194, 68, 122, 254, 67, 46, 72, 134, 109, 38, 144, 146, 57, 180, 9, 189, 67, 87, 215, 53, 0, 0, 0, 0, 0, 144, 0, 0, 0, 160, 214, 229, 152, 250, 208, 134, 187, 237, 170, 213, 237, 129, 163, 85, 139, 215, 120, 25, 26, 7, 244, 213, 206, 132, 69, 225, 23, 95, 239, 72, 0, 2, 0, 0, 0, 0, 144, 0, 0, 0, 1, 115, 108, 14, 0, 0, 0, 0, 0, 34, 81, 32, 189, 244, 45, 0, 151, 63, 208, 13, 152, 81, 12, 125, 71, 243, 180, 76, 199, 103, 2, 86, 94, 242, 154, 32, 18, 62, 42, 123, 59, 248, 243, 162, 229, 7, 37, 0, 2, 0, 0, 0, 1, 173, 181, 239, 40, 4, 74, 59, 6, 210, 73, 121, 190, 111, 171, 20, 46, 20, 101, 158, 39, 95, 86, 212, 59, 204, 43, 142, 122, 161, 131, 113, 168, 0, 0, 0, 0, 0, 254, 255, 255, 255, 2, 30, 45, 17, 0, 0, 0, 0, 0, 22, 0, 20, 230, 62, 231, 74, 41, 189, 215, 39, 212, 100, 172, 102, 118, 144, 12, 254, 22, 188, 59, 204, 200, 44, 1, 0, 0, 0, 0, 0, 22, 0, 20, 93, 87, 106, 129, 244, 96, 231, 161, 237, 37, 79, 233, 191, 255, 7, 90, 179, 188, 69, 101, 229, 7, 37, 0, 2, 0, 0, 0, 7, 205, 107, 196, 190, 118, 228, 63, 166, 179, 255, 3, 108, 159, 237, 17, 162, 136, 9, 165, 241, 83, 54, 221, 226, 18, 230, 39, 71, 194, 30, 16, 222, 1, 0, 0, 0, 23, 22, 0, 20, 122, 242, 232, 122, 67, 245, 55, 11, 23, 187, 11, 208, 234, 24, 132, 158, 18, 59, 166, 26, 254, 255, 255, 255, 97, 130, 178, 131, 167, 201, 56, 64, 193, 48, 103, 14, 119, 243, 228, 2, 137, 152, 12, 33, 16, 131, 169, 118, 186, 79, 70, 96, 100, 154, 158, 177, 0, 0, 0, 0, 23, 22, 0, 20, 181, 213, 168, 27, 163, 125, 71, 173, 95, 226, 118, 178, 63, 57, 115, 245, 107, 112, 164, 89, 254, 255, 255, 255, 127, 18, 236, 21, 57, 153, 118, 204, 147, 98, 109, 96, 21, 144, 52, 35, 195, 110, 14, 250, 79, 216, 3, 32, 145, 12, 179, 13, 120, 120, 26, 59, 1, 0, 0, 0, 23, 22, 0, 20, 24, 117, 248, 10, 156, 23, 32, 134, 186, 236, 57, 121, 91, 156, 113, 49, 247, 128, 247, 106, 254, 255, 255, 255, 184, 108, 147, 184, 132, 154, 92, 125, 246, 132, 215, 219, 180, 153, 13, 219, 59, 224, 39, 90, 156, 111, 208, 5, 59, 29, 139, 105, 146, 135, 162, 21, 1, 0, 0, 0, 23, 22, 0, 20, 181, 213, 168, 27, 163, 125, 71, 173, 95, 226, 118, 178, 63, 57, 115, 245, 107, 112, 164, 89, 254, 255, 255, 255, 250, 27, 163, 229, 36, 22, 122, 230, 5, 121, 107, 142, 119, 23, 7, 158, 174, 107, 43, 145, 230, 146, 155, 158, 192, 141, 115, 119, 209, 185, 195, 75, 0, 0, 0, 0, 23, 22, 0, 20, 122, 242, 232, 122, 67, 245, 55, 11, 23, 187, 11, 208, 234, 24, 132, 158, 18, 59, 166, 26, 254, 255, 255, 255, 255, 61, 137, 197, 122, 230, 155, 155, 69, 84, 81, 117, 142, 95, 52, 212, 128, 64, 14, 225, 95, 35, 32, 222, 161, 248, 175, 246, 27, 79, 182, 63, 0, 0, 0, 0, 23, 22, 0, 20, 181, 213, 168, 27, 163, 125, 71, 173, 95, 226, 118, 178, 63, 57, 115, 245, 107, 112, 164, 89, 254, 255, 255, 255, 142, 226, 71, 162, 212, 206, 93, 163, 181, 16, 71, 10, 248, 82, 206, 123, 173, 246, 239, 35, 7, 220, 250, 30, 248, 10, 20, 142, 90, 90, 191, 84, 1, 0, 0, 0, 23, 22, 0, 20, 181, 213, 168, 27, 163, 125, 71, 173, 95, 226, 118, 178, 63, 57, 115, 245, 107, 112, 164, 89, 254, 255, 255, 255, 2, 27, 198, 16, 0, 0, 0, 0, 0, 22, 0, 20, 143, 38, 99, 25, 31, 172, 40, 179, 179, 192, 97, 68, 171, 139, 12, 144, 198, 221, 8, 8, 64, 13, 3, 0, 0, 0, 0, 0, 23, 169, 20, 124, 23, 212, 14, 198, 88, 190, 149, 115, 251, 58, 59, 135, 174, 38, 86, 129, 21, 204, 52, 135, 205, 7, 37, 0, 2, 0, 0, 0, 1, 86, 250, 87, 130, 187, 19, 217, 141, 78, 244, 0, 110, 110, 88, 195, 182, 101, 39, 103, 34, 125, 33, 107, 90, 241, 205, 87, 105, 74, 31, 192, 156, 1, 0, 0, 0, 0, 254, 255, 255, 255, 2, 66, 201, 16, 0, 0, 0, 0, 0, 22, 0, 20, 31, 71, 72, 249, 207, 19, 53, 32, 194, 210, 251, 220, 166, 8, 64, 176, 174, 186, 250, 50, 160, 122, 3, 0, 0, 0, 0, 0, 22, 0, 20, 93, 87, 106, 129, 244, 96, 231, 161, 237, 37, 79, 233, 191, 255, 7, 90, 179, 188, 69, 101, 229, 7, 37, 0, 2, 0, 0, 0, 2, 222, 194, 186, 170, 27, 230, 11, 151, 238, 49, 114, 34, 186, 187, 102, 228, 19, 215, 16, 20, 7, 39, 13, 93, 75, 250, 213, 131, 43, 57, 226, 58, 1, 0, 0, 0, 0, 254, 255, 255, 255, 39, 3, 220, 149, 55, 17, 146, 194, 62, 248, 73, 237, 185, 57, 195, 102, 131, 8, 111, 74, 228, 11, 179, 246, 105, 244, 29, 20, 91, 247, 40, 95, 1, 0, 0, 0, 0, 254, 255, 255, 255, 2, 240, 73, 2, 0, 0, 0, 0, 0, 23, 169, 20, 57, 221, 101, 3, 241, 86, 44, 173, 188, 45, 20, 20, 21, 165, 54, 241, 165, 6, 76, 144, 135, 4, 154, 22, 0, 0, 0, 0, 0, 22, 0, 20, 97, 126, 244, 137, 159, 236, 221, 253, 226, 31, 192, 79, 67, 157, 10, 114, 233, 161, 184, 86, 229, 7, 37, 0, 2, 0, 0, 0, 1, 186, 137, 60, 245, 136, 3, 10, 88, 193, 249, 128, 69, 7, 26, 236, 226, 204, 242, 139, 85, 51, 20, 178, 9, 127, 104, 71, 131, 216, 90, 61, 120, 1, 0, 0, 0, 23, 22, 0, 20, 101, 95, 134, 113, 148, 233, 153, 119, 70, 83, 162, 234, 112, 55, 252, 171, 104, 136, 40, 117, 253, 255, 255, 255, 2, 224, 147, 4, 0, 0, 0, 0, 0, 23, 169, 20, 251, 107, 6, 253, 109, 231, 69, 210, 4, 162, 206, 168, 174, 213, 253, 66, 182, 182, 13, 99, 135, 58, 147, 4, 0, 0, 0, 0, 0, 23, 169, 20, 26, 15, 214, 231, 178, 113, 140, 61, 17, 148, 157, 9, 198, 147, 4, 141, 74, 55, 220, 34, 135, 228, 7, 37, 0, 1, 0, 0, 0, 1, 66, 126, 152, 201, 182, 91, 30, 83, 225, 25, 154, 35, 231, 223, 153, 187, 247, 162, 117, 182, 250, 91, 205, 146, 203, 201, 61, 52, 249, 190, 35, 29, 0, 0, 0, 0, 0, 254, 255, 255, 255, 1, 10, 132, 30, 0, 0, 0, 0, 0, 22, 0, 20, 149, 146, 162, 124, 43, 61, 182, 84, 196, 109, 186, 28, 27, 133, 174, 159, 225, 208, 79, 118, 198, 120, 39, 100];
        let mut block_bytes: &[u8] = &block_bytes;
        let block = Block::io_deserialize(&mut block_bytes).unwrap();
        assert!(block.proof_of_inclusion());
    }
}
